
#define RANGE Range(1000000LL, 1000000LL)
#define MULT RangeMultiplier(2)

// const long long MAX_RANGE_VALUE = 1000000LL;


static void BM_ModuloSum_Range_accumulate(benchmark::State& state) {
  for (auto _ : state) {
    auto range_gen = gen::range(1000000LL);
    long long sum = std::accumulate(range_gen.begin(), range_gen.end(), 0,
[](auto acc, auto i) { return acc + (i%13);
    });
    assert(sum!=0);
  }
}
BENCHMARK(BM_ModuloSum_Range_accumulate)->MULT->RANGE;

static void BM_ModuloSum_Range_set_state(benchmark::State& state) {
  for (auto _ : state) {
    long long sum = 0;
    auto range_gen = gen::range(1000000LL);
    auto sum_range
    =   pipe::set_state([](auto i, auto& _sum){ _sum += (i%13); }, sum)
    >>= sink::hole();
    range_gen >>= sum_range;
    assert(sum!=0);
  }
}
BENCHMARK(BM_ModuloSum_Range_set_state)->MULT->RANGE;

static void BM_ModuloSum_Range_for_each(benchmark::State& state) {
  for (auto _ : state) {
    long long sum = 0;
    auto range_gen = gen::range(1000000LL);
    auto sum_range
    =   sink::for_each([&sum](auto i){ sum += (i%13); });
    range_gen >>= sum_range;
    assert(sum!=0);
  }
}
BENCHMARK(BM_ModuloSum_Range_for_each)->MULT->RANGE;

static void BM_ModuloSum_ForLoop(benchmark::State& state) {
  for (auto _ : state) {
    long long sum = 0;
    for (long long i = 0; i < 1000000LL; ++i) {
      sum += (i%13);
    }
    assert(sum!=0);
  }
}
BENCHMARK(BM_ModuloSum_ForLoop)->MULT->RANGE;

static void BM_ModuloSum_Range_sum(benchmark::State& state) {
  for (auto _ : state) {
    long long sum = 0;
    auto range_gen = gen::range(1000000LL);
    auto sum_range
    =   pipe::transform([](auto i){ return (i%13); })
    >>= sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum!=0);
  }
}
BENCHMARK(BM_ModuloSum_Range_sum)->MULT->RANGE;

BENCHMARK_MAIN();